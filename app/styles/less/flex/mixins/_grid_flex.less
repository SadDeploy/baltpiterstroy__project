//
// Mixins -> FlexGrid
// ------------------------------------
  // Centered container element
  .container-fixed() {
    margin-right: auto;
    margin-left: auto;
    padding-left:  (@grid-gutter-width / 2)rem;
    padding-right: (@grid-gutter-width / 2)rem;
  }

  // Creates a wrapper for a series of columns
  .make-row(@gutter: @grid-gutter-width) {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
    -webkit-flex: 0 1 auto;
    -ms-flex: 0 1 auto;
    -webkit-box-flex: 0;
    flex: 0 1 auto;
    -webkit-flex-direction: row;
    -ms-flex-direction: row;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
    flex-direction: row;
    -webkit-flex-wrap: wrap;
    -moz-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    -o-flex-wrap: wrap;
    flex-wrap: wrap;
    margin-left:  (@gutter / -2)rem;
    margin-right: (@gutter / -2)rem;
  }

  // Generate the extra small columns
  .make-xs-column(@columns; @gutter: @grid-gutter-width) {
    // box-sizing: border-box;
    -webkit-flex: 0 0 auto;
    -ms-flex: 0 0 auto;
    -webkit-box-flex: 0;
    flex: 0 0 auto;

    padding-left:  (@gutter / 2)rem;
    padding-right: (@gutter / 2)rem;

    -ms-flex-preferred-size: percentage((@columns / @grid-columns));
    -webkit-flex-basis: percentage((@columns / @grid-columns));
    flex-basis: percentage((@columns / @grid-columns));
    max-width: percentage((@columns / @grid-columns));

  }

  // Generate the small columns
  .make-sm-column(@columns; @gutter: @grid-gutter-width) {
    // box-sizing: border-box;
    -webkit-flex: 0 0 auto;
    -ms-flex: 0 0 auto;
    -webkit-box-flex: 0;
    flex: 0 0 auto;

    padding-left:  (@gutter / 2)rem;
    padding-right: (@gutter / 2)rem;

    // Calculate width based on number of columns available
    @media (min-width: @screen-sm-min) {
      -ms-flex-preferred-size: percentage((@columns / @grid-columns));
      -webkit-flex-basis: percentage((@columns / @grid-columns));
      flex-basis: percentage((@columns / @grid-columns));
      max-width: percentage((@columns / @grid-columns));
    }
  }


  // Generate the medium columns
  .make-md-column(@columns; @gutter: @grid-gutter-width) {
    // box-sizing: border-box;
    -webkit-flex: 0 0 auto;
    -ms-flex: 0 0 auto;
    -webkit-box-flex: 0;
    flex: 0 0 auto;

    padding-left:  (@gutter / 2)rem;
    padding-right: (@gutter / 2)rem;

    // Calculate width based on number of columns available
    @media (min-width: @screen-md-min) {
      -ms-flex-preferred-size: percentage((@columns / @grid-columns));
      -webkit-flex-basis: percentage((@columns / @grid-columns));
      flex-basis: percentage((@columns / @grid-columns));
      max-width: percentage((@columns / @grid-columns));
    }
  }


  // Generate the large columns
  .make-lg-column(@columns; @gutter: @grid-gutter-width) {
    // box-sizing: border-box;
    -webkit-flex: 0 0 auto;
    -ms-flex: 0 0 auto;
    -webkit-box-flex: 0;
    flex: 0 0 auto;

    padding-left:  (@gutter / 2)rem;
    padding-right: (@gutter / 2)rem;

    // Calculate width based on number of columns available
    @media (min-width: @screen-lg-min) {
      -ms-flex-preferred-size: percentage((@columns / @grid-columns));
      -webkit-flex-basis: percentage((@columns / @grid-columns));
      flex-basis: percentage((@columns / @grid-columns));
      max-width: percentage((@columns / @grid-columns));
    }
  }

  // Generate the large columns
  .make-xlg-column(@columns; @gutter: @grid-gutter-width) {
    // box-sizing: border-box;
    -webkit-flex: 0 0 auto;
    -ms-flex: 0 0 auto;
    -webkit-box-flex: 0;
    flex: 0 0 auto;

    padding-left:  (@gutter / 2)rem;
    padding-right: (@gutter / 2)rem;

    // Calculate width based on number of columns available
    @media (min-width: @screen-xlg-min) {
      -ms-flex-preferred-size: percentage((@columns / @grid-columns));
      -webkit-flex-basis: percentage((@columns / @grid-columns));
      flex-basis: percentage((@columns / @grid-columns));
      max-width: percentage((@columns / @grid-columns));
    }
  }

  .make-grid-columns() {
    // Common styles for all sizes of grid columns, widths 1-12
    .col(@index) when (@index = 1) { // initial
      @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
      .col(@index + 1, @item);
    }
    .col(@index, @list) when (@index =< @grid-columns) { // general; "=<" isn't a typo
      @item: ~".col-xs-@{index}, .col-sm-@{index}, .col-md-@{index}, .col-lg-@{index}";
      .col(@index + 1, ~"@{list}, @{item}");
    }
    .col(@index, @list) when (@index > @grid-columns) { // terminal
      @{list} {
        box-sizing: border-box;
        -webkit-flex: 0 0 auto;
        -ms-flex: 0 0 auto;
        -webkit-box-flex: 0;
        flex: 0 0 auto;

      }
    }
    .col(1); // kickstart it
  }

  .make-grid-columns-float(@class) {
    .col(@index) when (@index = 1) { // initial
      @item: ~".col-@{class}-@{index}";
      .col(@index + 1, @item);
    }
    .col(@index, @list) when (@index =< @grid-columns) { // general
      @item: ~".col-@{class}-@{index}";
      .col(@index + 1, ~"@{list}, @{item}");
    }
    .col(1); // kickstart it
  }

  .calc-grid(@index, @class, @type) when (@type = width) and (@index > 0) {
    .col-@{class}-@{index} {
      -ms-flex-preferred-size: percentage((@index / @grid-columns));
      -webkit-flex-basis: percentage((@index / @grid-columns));
      flex-basis: percentage((@index / @grid-columns));
      max-width: percentage((@index / @grid-columns));
    }
  }
  .calc-grid(@index, @class, @type) when (@type = start) {
    .start-@{class} {
      -webkit-justify-content: flex-start;
      -ms-flex-pack: start;
      justify-content: flex-start;
      text-align: start;
    }
  }
  .calc-grid(@index, @class, @type) when (@type = end) {
    .end-@{class} {
      -webkit-justify-content: flex-end;
      -ms-flex-pack: end;
      justify-content: flex-end;
      text-align: end;
    }
  }
  .calc-grid(@index, @class, @type) when (@type = center) {
    .center-@{class} {
      -webkit-justify-content: center;
      -ms-flex-pack: center;
      justify-content: center;
      text-align: center;
    }
  }
  .calc-grid(@index, @class, @type) when (@type = top) {
    .top-@{class} {
      -webkit-align-items: flex-start;
      -ms-flex-align: start;
      align-items: flex-start;
    }
  }
  .calc-grid(@index, @class, @type) when (@type = middle) {
    .middle-@{class} {
      -webkit-align-items: center;
      -ms-flex-align: center;
      align-items: center;
    }
  }
  .calc-grid(@index, @class, @type) when (@type = bottom) {
    .bottom-@{class} {
      -webkit-align-items: flex-end;
      -ms-flex-align: end;
      align-items: flex-end;
    }
  }
  .calc-grid(@index, @class, @type) when (@type = around) {
    .around-@{class} {
      -webkit-justify-content: space-around;
      -ms-flex-pack: distribute;
      justify-content: space-around;
    }
  }
  .calc-grid(@index, @class, @type) when (@type = between) {
    .between-@{class} {
      -webkit-justify-content: space-between;
      -ms-flex-pack: justify;
      justify-content: space-between;
    }
  }
  .calc-grid(@index, @class, @type) when (@type = first) {
    .first-@{class} {
      -webkit-order: -1;
      -ms-flex-order: -1;
      order: -1;
    }
  }
  .calc-grid(@index, @class, @type) when (@type = last) {
    .last-@{class} {
      -webkit-order: 1;
      -ms-flex-order: 1;
      order: 1;
    }
  }


  // Basic looping in LESS
  .make-grid(@index, @class, @type) when (@index >= 0) {
    .calc-grid(@index, @class, @type);
    // next iteration
    .make-grid(@index - 1, @class, @type);
  }

